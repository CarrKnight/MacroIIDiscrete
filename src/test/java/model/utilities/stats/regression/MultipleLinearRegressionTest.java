/*
 * Copyright (c) 2014 by Ernesto Carrella
 * Licensed under MIT license. Basically do what you want with it but cite me and don't sue me. Which is just politeness, really.
 * See the file "LICENSE" for more information
 */

package model.utilities.stats.regression;

import org.junit.Assert;
import org.junit.Test;

/**
 * <h4>Description</h4>
 * <p/>
 * <p/>
 * <p/>
 * <h4>Notes</h4>
 * Created with IntelliJ
 * <p/>
 * <p/>
 * <h4>References</h4>
 *
 * @author carrknight
 * @version 2013-08-07
 * @see
 */
public class MultipleLinearRegressionTest {

    /**
     * These are a copy of the linear regression (univariate)
     */


    @Test
    public void linearRegressionTest() throws LinearRegression.CollinearityException {

        //I am going to estimate this in R, and the results ought to be the same!

        double[] x = new double[20];
        for(int i=1; i <=20; i++)
            x[i-1]=i;

        double[] y = new double[]{
                5.544928,  10.462137,  14.655520,  21.852715,  24.383909 , 32.130177,  35.646123,  42.884142,  43.967171,
                51.520706,  56.528435 , 62.053947 , 66.639255 , 72.551495 , 77.795903 , 82.147417 ,88.025807  ,91.112676 ,
                96.816806 ,100.589558

        };


        MultipleLinearRegression regression = new MultipleLinearRegression();
        regression.estimateModel(y,null,x);

        //make sure the intercept and slope are correct!
        Assert.assertEquals(regression.getResultMatrix()[0], 0.4674, .01);
        Assert.assertEquals(regression.getResultMatrix()[1],5.0855,.01);

        //make sure predictions are correct
        Assert.assertEquals(regression.predict(20),102.177986,.01 );
        Assert.assertEquals(regression.predict(10),51.322676,.01 );
        Assert.assertEquals(regression.predict(11.1),56.91645,.01 );



    }

    @Test
    public void weightedLinearRegressionTest() throws LinearRegression.CollinearityException {

        //I am going to estimate this in R, and the results ought to be the same!

        double[] x = new double[20];
        double[] weights = new double[20];

        for(int i=1; i <=20; i++)
        {
            x[i-1]=i;
            weights[i-1]=i;
        }

        double[] y = new double[]{
                5.544928,  10.462137,  14.655520,  21.852715,  24.383909 , 32.130177,  35.646123,  42.884142,  43.967171,
                51.520706,  56.528435 , 62.053947 , 66.639255 , 72.551495 , 77.795903 , 82.147417 ,88.025807  ,91.112676 ,
                96.816806 ,100.589558

        };




        MultipleLinearRegression regression = new MultipleLinearRegression();
        regression.estimateModel(y,weights,x);

        //make sure the intercept and slope are correct!
        Assert.assertEquals(regression.getResultMatrix()[0],0.958,.01);
        Assert.assertEquals(regression.getResultMatrix()[1],5.050,.01);

        //make sure predictions are correct
        Assert.assertEquals(regression.predict(20),101.958,.01 );
        Assert.assertEquals(regression.predict(10),51.458,.01 );
        Assert.assertEquals(regression.predict(11.1),57.013,.01 );



    }






    //if we input every x being the same, it should produce a y = a model
    @Test
    public void noEstimationReturnsNaN()
    {
        MultipleLinearRegression regression = new MultipleLinearRegression();


        //make sure the intercept and slope are correct!
        Assert.assertNull(regression.getResultMatrix());

        //make sure predictions are correct
        Assert.assertTrue(Double.isNaN(regression.predict(20)) );
        Assert.assertTrue(Double.isNaN(regression.predict(10)) );
        Assert.assertTrue(Double.isNaN(regression.predict(11.1)) );



    }


    //multiple linear regressions here

    @Test
    public void multipleLinearRegressionTest() throws LinearRegression.CollinearityException {

        //I am going to estimate this in R, and the results ought to be the same!

        double[] x = new double[20];
        double[] z = new double[20];
        for(int i=1; i <=20; i++)
        {
            x[i-1]=i;
            z[i-1] = i*i;
        }

        double[] y = new double[]{
                0.220132,-1.308092,-8.711355,-20.348017,-34.321316,-52.201061,-76.714972,-105.452581,
                -134.808097,-170.476175,-208.826978,-252.084882,-298.449173,-350.293456,-403.583906,
                -462.481705,-524.983629,-593.838584, -665.814769,-740.413043

        };


        MultipleLinearRegression regression = new MultipleLinearRegression();
        regression.estimateModel(y,null,x,z);

        //make sure the intercept and slope are correct!
        Assert.assertEquals(regression.getResultMatrix()[0], -0.1997, .01);
        Assert.assertEquals(regression.getResultMatrix()[1],3.0936,.01);
        Assert.assertEquals(regression.getResultMatrix()[2],-2.0037,.01);

        //make sure predictions are correct
        Assert.assertEquals(regression.predict(20,20*20),-739.8077,.01 );
        Assert.assertEquals(regression.predict(10,100),-169.6337,.01 );
        Assert.assertEquals(regression.predict(11.1,11.1*11.1),-212.7366,.01 );



    }


    @Test
    public void collinearity() throws LinearRegression.CollinearityException {

        //I am going to estimate this in R, and the results ought to be the same!

        double[] x = new double[20];
        double[] z = new double[20];
        for(int i=1; i <=20; i++)
        {
            x[i-1]=i;
            z[i-1] = i;
        }

        double[] y = new double[]{
                0.220132,-1.308092,-8.711355,-20.348017,-34.321316,-52.201061,-76.714972,-105.452581,
                -134.808097,-170.476175,-208.826978,-252.084882,-298.449173,-350.293456,-403.583906,
                -462.481705,-524.983629,-593.838584, -665.814769,-740.413043

        };


        MultipleLinearRegression regression = new MultipleLinearRegression();
        boolean collinearityFound = false;
        try{
            regression.estimateModel(y,null,x,z);
        }
        catch (LinearRegression.CollinearityException ex)
        {
            collinearityFound = true;
            regression.estimateModel(y,null,x);

        }
        Assert.assertTrue(collinearityFound);
        //make sure the intercept and slope are correct!
        Assert.assertEquals(regression.getResultMatrix()[0], 154.08, .01);
        Assert.assertEquals(regression.getResultMatrix()[1],-38.98,.01);
        //Assert.assertEquals(regression.getResultMatrix()[2],0,.01);

        //make sure predictions are correct
        Assert.assertEquals(regression.predict(20),-625.5892,.01 );
        Assert.assertEquals(regression.predict(10),-235.7528,.01 );
        Assert.assertEquals(regression.predict(11.1), -278.6348,.01 );



    }

    @Test
    public void doesntModifyRegressors() throws LinearRegression.CollinearityException {


        double y[] = new double[]{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,171.0,0.0,0.0,-2.0,0.0,0.0,-1.0,-1.0,0.0,-2.0,0.0,0.0,0.0,-2.0,0.0,-1.0,-2.0,0.0,-1.0,0.0,-1.0,-1.0,0.0,0.0,-2.0,0.0,0.0,0.0,0.0,-1.0,-1.0,0.0,-2.0,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,-2.0,0.0,0.0,-1.0,-2.0,1.0,-2.0,0.0,-1.0,-1.0,0.0,-2.0,0.0,-1.0,-1.0,0.0,-1.0,-1.0,0.0,-2.0,0.0,-1.0,-2.0,1.0,-1.0,-2.0,1.0,-1.0,-1.0,0.0,0.0,-2.0,0.0,-1.0,-1.0,0.0,-1.0,-2.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
        double[] yCopy = y.clone();

        double weights[] = new double[]{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.45016600194986517,0.45016600194986517,0.45016600194986517,0.40131233845548236,0.40131233845548236,0.45016600194986517,0.40131233845548236,0.40131233845548236,0.45016600194986517,0.40131233845548236,0.40131233845548236,0.45016600194986517,0.45016600194986517,0.40131233845548236,0.45016600194986517,0.40131233845548236,0.40131233845548236,0.3543436883195632,0.40131233845548236,0.40131233845548236,0.40131233845548236,0.40131233845548236,0.45016600194986517,0.45016600194986517,0.40131233845548236,0.45016600194986517,0.45016600194986517,0.45016600194986517,0.45016600194986517,0.45016600194986517,0.45016600194986517,0.45016600194986517,0.40131233845548236,0.40131233845548236,0.45016600194986517,0.45016600194986517,0.40131233845548236,0.45016600194986517,0.45016600194986517,0.45016600194986517,0.40131233845548236,0.45016600194986517,0.45016600194986517,0.40131233845548236,0.40131233845548236,0.45016600194986517,0.40131233845548236,0.40131233845548236,0.40131233845548236,0.40131233845548236,0.40131233845548236,0.40131233845548236,0.40131233845548236,0.40131233845548236,0.40131233845548236,0.40131233845548236,0.40131233845548236,0.40131233845548236,0.45016600194986517,0.40131233845548236,0.40131233845548236,0.40131233845548236,0.40131233845548236,0.40131233845548236,0.40131233845548236,0.40131233845548236,0.45016600194986517,0.40131233845548236,0.40131233845548236,0.45016600194986517,0.45016600194986517,0.40131233845548236,0.45016600194986517,0.40131233845548236,0.40131233845548236,0.40131233845548236,0.40131233845548236,0.40131233845548236,0.45016600194986517,0.40131233845548236,0.40131233845548236,0.45016600194986517,0.45016600194986517,0.45016600194986517,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5};
        double[] wCopy = weights.clone();

        double[] x1 = new double[]{-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,170.0,170.0,170.0,168.0,168.0,168.0,167.0,166.0,166.0,164.0,164.0,164.0,164.0,162.0,162.0,161.0,159.0,159.0,158.0,158.0,157.0,156.0,156.0,156.0,154.0,154.0,154.0,154.0,154.0,153.0,152.0,152.0,150.0,150.0,150.0,150.0,149.0,148.0,148.0,148.0,146.0,146.0,146.0,145.0,143.0,144.0,142.0,142.0,141.0,140.0,140.0,138.0,138.0,137.0,136.0,136.0,135.0,134.0,134.0,132.0,132.0,131.0,129.0,130.0,129.0,127.0,128.0,127.0,126.0,126.0,126.0,124.0,124.0,123.0,122.0,122.0,121.0,119.0,120.0,121.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0,122.0};
        double[] x1Copy = x1.clone();


        double[] x2 = new double[]{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,2.0,2.0,2.0,3.0,3.0,4.0,4.0,4.0,4.0,4.0,5.0,5.0,6.0,6.0,7.0,7.0,7.0,8.0,8.0,8.0,8.0,9.0,9.0,9.0,9.0,9.0,10.0,10.0,11.0,11.0,11.0,11.0,11.0,12.0,12.0,12.0,12.0,13.0,13.0,13.0,14.0,14.0,15.0,15.0,15.0,16.0,16.0,17.0,17.0,17.0,18.0,18.0,18.0,19.0,19.0,20.0,20.0,20.0,21.0,21.0,21.0,22.0,22.0,22.0,23.0,23.0,23.0,24.0,24.0,24.0,25.0,25.0,25.0,26.0,26.0,26.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0};
        double[] x2Copy = x2.clone();


        MultipleLinearRegression regression = new MultipleLinearRegression();

        regression.estimateModel(y,weights,x1,x2);

        Assert.assertArrayEquals(x1,x1Copy,.001d);
        Assert.assertArrayEquals(x2,x2Copy,.001d);
        Assert.assertArrayEquals(y,yCopy,.001d);
        Assert.assertArrayEquals(weights,wCopy,.001d);




    }





}
